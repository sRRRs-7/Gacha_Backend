// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: items.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    item_name, rating, item_url, category_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, item_name, rating, item_url, category_id, created_at
`

type CreateItemParams struct {
	ItemName   string `json:"item_name"`
	Rating     int32  `json:"rating"`
	ItemUrl    string `json:"item_url"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ItemName,
		arg.Rating,
		arg.ItemUrl,
		arg.CategoryID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemName,
		&i.Rating,
		&i.ItemUrl,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, item_name, rating, item_url, category_id, created_at FROM items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemName,
		&i.Rating,
		&i.ItemUrl,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const listItemByCategoryId = `-- name: ListItemByCategoryId :many
SELECT id, item_name, rating, item_url, category_id, created_at FROM items
WHERE category_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListItemByCategoryIdParams struct {
	CategoryID int32 `json:"category_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListItemByCategoryId(ctx context.Context, arg ListItemByCategoryIdParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItemByCategoryId, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.ItemName,
			&i.Rating,
			&i.ItemUrl,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsByCategoryId = `-- name: ListItemsByCategoryId :many
SELECT id, item_name, rating, item_url, category_id, created_at FROM items
ORDER BY category_id ASC
LIMIT $1
OFFSET $2
`

type ListItemsByCategoryIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListItemsByCategoryId(ctx context.Context, arg ListItemsByCategoryIdParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItemsByCategoryId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.ItemName,
			&i.Rating,
			&i.ItemUrl,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsById = `-- name: ListItemsById :many
SELECT id, item_name, rating, item_url, category_id, created_at FROM items
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListItemsByIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListItemsById(ctx context.Context, arg ListItemsByIdParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItemsById, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.ItemName,
			&i.Rating,
			&i.ItemUrl,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsByItemName = `-- name: ListItemsByItemName :many
SELECT id, item_name, rating, item_url, category_id, created_at FROM items
ORDER BY item_name ASC
LIMIT $1
OFFSET $2
`

type ListItemsByItemNameParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListItemsByItemName(ctx context.Context, arg ListItemsByItemNameParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItemsByItemName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.ItemName,
			&i.Rating,
			&i.ItemUrl,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsByRating = `-- name: ListItemsByRating :many
SELECT id, item_name, rating, item_url, category_id, created_at FROM items
ORDER BY rating DESC
LIMIT $1
OFFSET $2
`

type ListItemsByRatingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListItemsByRating(ctx context.Context, arg ListItemsByRatingParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItemsByRating, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.ItemName,
			&i.Rating,
			&i.ItemUrl,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET item_name = $2, rating = $3, item_url = $4, category_id = $5
where id = $1
RETURNING id, item_name, rating, item_url, category_id, created_at
`

type UpdateItemParams struct {
	ID         int64  `json:"id"`
	ItemName   string `json:"item_name"`
	Rating     int32  `json:"rating"`
	ItemUrl    string `json:"item_url"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ID,
		arg.ItemName,
		arg.Rating,
		arg.ItemUrl,
		arg.CategoryID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemName,
		&i.Rating,
		&i.ItemUrl,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}
