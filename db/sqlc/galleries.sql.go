// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: galleries.sql

package db

import (
	"context"
	"time"
)

const createGallery = `-- name: CreateGallery :one
INSERT INTO galleries (
    owner_id, item_id
) VALUES (
    $1, $2
) RETURNING id, owner_id, item_id, exchange_at, created_at
`

type CreateGalleryParams struct {
	OwnerID int64 `json:"owner_id"`
	ItemID  int64 `json:"item_id"`
}

func (q *Queries) CreateGallery(ctx context.Context, arg CreateGalleryParams) (Gallery, error) {
	row := q.db.QueryRowContext(ctx, createGallery, arg.OwnerID, arg.ItemID)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ItemID,
		&i.ExchangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const getGallery = `-- name: GetGallery :one
SELECT id, owner_id, item_id, exchange_at, created_at FROM galleries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGallery(ctx context.Context, id int64) (Gallery, error) {
	row := q.db.QueryRowContext(ctx, getGallery, id)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ItemID,
		&i.ExchangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const listGalleriesById = `-- name: ListGalleriesById :many
SELECT id, owner_id, item_id, exchange_at, created_at FROM galleries
WHERE owner_id = $1
ORDER BY id ASC
LIMIT $2
OFFSET $3
`

type ListGalleriesByIdParams struct {
	OwnerID int64 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListGalleriesById(ctx context.Context, arg ListGalleriesByIdParams) ([]Gallery, error) {
	rows, err := q.db.QueryContext(ctx, listGalleriesById, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Gallery{}
	for rows.Next() {
		var i Gallery
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ItemID,
			&i.ExchangeAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGalleriesByItemId = `-- name: ListGalleriesByItemId :many
SELECT id, owner_id, item_id, exchange_at, created_at FROM galleries
WHERE item_id = $1
ORDER BY item_id ASC
LIMIT $2
OFFSET $3
`

type ListGalleriesByItemIdParams struct {
	ItemID int64 `json:"item_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGalleriesByItemId(ctx context.Context, arg ListGalleriesByItemIdParams) ([]Gallery, error) {
	rows, err := q.db.QueryContext(ctx, listGalleriesByItemId, arg.ItemID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Gallery{}
	for rows.Next() {
		var i Gallery
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ItemID,
			&i.ExchangeAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGallery = `-- name: UpdateGallery :one
UPDATE galleries
SET owner_id = $3, exchange_at = $4
WHERE owner_id = $1 AND item_id = $2
RETURNING id, owner_id, item_id, exchange_at, created_at
`

type UpdateGalleryParams struct {
	OwnerID    int64     `json:"owner_id"`
	ItemID     int64     `json:"item_id"`
	OwnerID_2  int64     `json:"owner_id_2"`
	ExchangeAt time.Time `json:"exchange_at"`
}

func (q *Queries) UpdateGallery(ctx context.Context, arg UpdateGalleryParams) (Gallery, error) {
	row := q.db.QueryRowContext(ctx, updateGallery,
		arg.OwnerID,
		arg.ItemID,
		arg.OwnerID_2,
		arg.ExchangeAt,
	)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ItemID,
		&i.ExchangeAt,
		&i.CreatedAt,
	)
	return i, err
}
