// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: exchanges.sql

package db

import (
	"context"
)

const createExchange = `-- name: CreateExchange :one
INSERT INTO exchanges (
    from_account_id, to_account_id, item_id
) VALUES (
    $1, $2, $3
) RETURNING id, from_account_id, to_account_id, item_id, created_at
`

type CreateExchangeParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	ItemID        int64 `json:"item_id"`
}

func (q *Queries) CreateExchange(ctx context.Context, arg CreateExchangeParams) (Exchange, error) {
	row := q.db.QueryRowContext(ctx, createExchange, arg.FromAccountID, arg.ToAccountID, arg.ItemID)
	var i Exchange
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.ItemID,
		&i.CreatedAt,
	)
	return i, err
}

const getExchange = `-- name: GetExchange :one
SELECT id, from_account_id, to_account_id, item_id, created_at FROM exchanges
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExchange(ctx context.Context, id int64) (Exchange, error) {
	row := q.db.QueryRowContext(ctx, getExchange, id)
	var i Exchange
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.ItemID,
		&i.CreatedAt,
	)
	return i, err
}

const listExchangeFromAccount = `-- name: ListExchangeFromAccount :many
SELECT id, from_account_id, to_account_id, item_id, created_at FROM exchanges
WHERE from_account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListExchangeFromAccountParams struct {
	FromAccountID int64 `json:"from_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListExchangeFromAccount(ctx context.Context, arg ListExchangeFromAccountParams) ([]Exchange, error) {
	rows, err := q.db.QueryContext(ctx, listExchangeFromAccount, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exchange{}
	for rows.Next() {
		var i Exchange
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.ItemID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExchangeToAccount = `-- name: ListExchangeToAccount :many
SELECT id, from_account_id, to_account_id, item_id, created_at FROM exchanges
WHERE to_account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListExchangeToAccountParams struct {
	ToAccountID int64 `json:"to_account_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListExchangeToAccount(ctx context.Context, arg ListExchangeToAccountParams) ([]Exchange, error) {
	rows, err := q.db.QueryContext(ctx, listExchangeToAccount, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exchange{}
	for rows.Next() {
		var i Exchange
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.ItemID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
