// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: approval.sql

package db

import (
	"context"
)

const createApproval = `-- name: CreateApproval :one
INSERT INTO approval (
    from_account_id,
    from_item_id,
    from_A_approval,
    to_account_id,
    to_item_id,
    to_A_approval
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, from_account_id, from_item_id, from_a_approval, to_account_id, to_item_id, to_a_approval, created_at
`

type CreateApprovalParams struct {
	FromAccountID int64 `json:"from_account_id"`
	FromItemID    int64 `json:"from_item_id"`
	FromAApproval bool  `json:"from_a_approval"`
	ToAccountID   int64 `json:"to_account_id"`
	ToItemID      int64 `json:"to_item_id"`
	ToAApproval   bool  `json:"to_a_approval"`
}

func (q *Queries) CreateApproval(ctx context.Context, arg CreateApprovalParams) (Approval, error) {
	row := q.db.QueryRowContext(ctx, createApproval,
		arg.FromAccountID,
		arg.FromItemID,
		arg.FromAApproval,
		arg.ToAccountID,
		arg.ToItemID,
		arg.ToAApproval,
	)
	var i Approval
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.FromItemID,
		&i.FromAApproval,
		&i.ToAccountID,
		&i.ToItemID,
		&i.ToAApproval,
		&i.CreatedAt,
	)
	return i, err
}

const deleteApproval = `-- name: DeleteApproval :exec
DELETE FROM approval
WHERE id = $1
`

func (q *Queries) DeleteApproval(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteApproval, id)
	return err
}

const getApproval = `-- name: GetApproval :one
SELECT id, from_account_id, from_item_id, from_a_approval, to_account_id, to_item_id, to_a_approval, created_at FROM approval
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetApproval(ctx context.Context, id int64) (Approval, error) {
	row := q.db.QueryRowContext(ctx, getApproval, id)
	var i Approval
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.FromItemID,
		&i.FromAApproval,
		&i.ToAccountID,
		&i.ToItemID,
		&i.ToAApproval,
		&i.CreatedAt,
	)
	return i, err
}

const listApproval = `-- name: ListApproval :many
SELECT id, from_account_id, from_item_id, from_a_approval, to_account_id, to_item_id, to_a_approval, created_at FROM approval
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListApprovalParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListApproval(ctx context.Context, arg ListApprovalParams) ([]Approval, error) {
	rows, err := q.db.QueryContext(ctx, listApproval, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Approval{}
	for rows.Next() {
		var i Approval
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.FromItemID,
			&i.FromAApproval,
			&i.ToAccountID,
			&i.ToItemID,
			&i.ToAApproval,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApprovalRequest = `-- name: UpdateApprovalRequest :one
UPDATE approval
SET from_A_approval = $2
where id = $1
RETURNING id, from_account_id, from_item_id, from_a_approval, to_account_id, to_item_id, to_a_approval, created_at
`

type UpdateApprovalRequestParams struct {
	ID            int64 `json:"id"`
	FromAApproval bool  `json:"from_a_approval"`
}

func (q *Queries) UpdateApprovalRequest(ctx context.Context, arg UpdateApprovalRequestParams) (Approval, error) {
	row := q.db.QueryRowContext(ctx, updateApprovalRequest, arg.ID, arg.FromAApproval)
	var i Approval
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.FromItemID,
		&i.FromAApproval,
		&i.ToAccountID,
		&i.ToItemID,
		&i.ToAApproval,
		&i.CreatedAt,
	)
	return i, err
}

const updateApprovalResponse = `-- name: UpdateApprovalResponse :one
UPDATE approval
SET to_A_approval = $2
where id = $1
RETURNING id, from_account_id, from_item_id, from_a_approval, to_account_id, to_item_id, to_a_approval, created_at
`

type UpdateApprovalResponseParams struct {
	ID          int64 `json:"id"`
	ToAApproval bool  `json:"to_a_approval"`
}

func (q *Queries) UpdateApprovalResponse(ctx context.Context, arg UpdateApprovalResponseParams) (Approval, error) {
	row := q.db.QueryRowContext(ctx, updateApprovalResponse, arg.ID, arg.ToAApproval)
	var i Approval
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.FromItemID,
		&i.FromAApproval,
		&i.ToAccountID,
		&i.ToItemID,
		&i.ToAApproval,
		&i.CreatedAt,
	)
	return i, err
}
