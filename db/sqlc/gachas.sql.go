// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: gachas.sql

package db

import (
	"context"
)

const createGacha = `-- name: CreateGacha :one
INSERT INTO gachas (
    account_id, item_id
) VALUES (
    $1, $2
) RETURNING id, account_id, item_id, created_at
`

type CreateGachaParams struct {
	AccountID int64 `json:"account_id"`
	ItemID    int64 `json:"item_id"`
}

func (q *Queries) CreateGacha(ctx context.Context, arg CreateGachaParams) (Gacha, error) {
	row := q.db.QueryRowContext(ctx, createGacha, arg.AccountID, arg.ItemID)
	var i Gacha
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ItemID,
		&i.CreatedAt,
	)
	return i, err
}

const getGacha = `-- name: GetGacha :one
SELECT id, account_id, item_id, created_at FROM gachas
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetGacha(ctx context.Context, id int64) (Gacha, error) {
	row := q.db.QueryRowContext(ctx, getGacha, id)
	var i Gacha
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ItemID,
		&i.CreatedAt,
	)
	return i, err
}

const listGachas = `-- name: ListGachas :many
SELECT id, account_id, item_id, created_at FROM gachas
ORDER BY id ASC
LIMIT $1
OFFSET $2
`

type ListGachasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGachas(ctx context.Context, arg ListGachasParams) ([]Gacha, error) {
	rows, err := q.db.QueryContext(ctx, listGachas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Gacha{}
	for rows.Next() {
		var i Gacha
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.ItemID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
